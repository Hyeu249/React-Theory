                                                                                            What is React.js       
                                                                                        ------------------------   
*what is React:
   -react is "individual building blocks(components)" which we combine together to build a user interface(react is a client-side Javascript library)
   -why React instead of just "Javascript": by giving "a higher level syntax" it makes building "modern, rich, complex user interfaces" easier, where we write code in a declarative way(component-focused)

*declarative approach: define the desired target state(s) and let react figure out the actual javascript DOM instructions

*single-page application: is an app that doesn't need to reload the page during its use and works within a browser

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                          Components in React         
                                                                                  -----------------------------------  
*introducting components:
   -what are Components:
      -components are "reusable building blocks" in user interface(a combination of HTML, CSS, and JS)
      -acting like JavaScript functions they accept arbitrary inputs (called “props”) and return "react elements(JSX)" describing what should appear on the screen

   -why components: because of that "reusability aspec", and it allows to "separate our concerns", both are important concepts in programming
      -"reusable building blocks" helps avoid repetition(repeat ourselves)
      -"separation of concerns": helps us with keeping code base small and manageable

   -component rule: only have one root element(element of JSX code), per a return statement

   -component conventions: starting with a capital character

   -the concept of composition: whenever you combine components, you are using composition, and react has a powerful composition model

*good practice in Components:
   -splitting components into multiple components

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                                             JSX in React    
                                                                                  -----------------------------------  
*introducting JSX:
   -JSX: stands for JavaScript XML(HTML is XML), simply an HTML code is written in React development environment

   -JSX in deep: React.createElement("div", {}, content)

*JSX limitations: if component return "adjacent root level JSX elements", we'll get an error

*dynamic data in JSX code:
   -replace hard code data: with opening and closing curly braces,  in curly braces, you can run basic "javaScript expressions(produce value)"

*rendering lists of data in JSX code:
   -if you do output an array of JSX elements in JSX code, then React is capable of simply rendering these elements side by side
   -the way to output an array of JSX elements: map built-in JS method, array of JSX elements itself,...

   -React has a special concept when it comes to rendering lists of data a concept which exists to ensure that React is able to update and render such lists efficiently without performance losses,
    or bugs, which may occur.
   -how rendering lists of data in JSX code works:
      - React, renders the new element and updates all the element and replace their content(re-new their state),

*keys in lists of data in JSX code: 
   -keys: help React identify which elements in a array have changed, are added, or are removed, other wise it updates all the element and re-new their content(re-new their state)
   -where to put keys: put unique key inside "key attribute of element JSX code" when work with "an array of JSX elements"

*attribute of JSX element:
   -className
   -onClick
   -onChange
   -value
   -ref

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                            Props in React         
                                                                                  -----------------------------------  
*introducting props:
   -what are props(properties): 
      -they are read-only, it's an object which stores the value of attributes of a tag and work similar to the HTML attributes
      -it gives a way to pass data from one component to other components, it's similar to "function arguments"

   -why props important: it allows to share data across components, it allows to make components reusable(different component has different data)

*props.children: allows to create wrapper components, a special type of component                             

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                                                                                     
                                                                                       React & ReactDom packages    
                                                                                  -----------------------------------  
*React packages:is responsible for creating views(JSX)

*ReactDOM packages: is responsible to actually render UI in the browser. Often, you will only use it for one single thing: mounting your application to the index.html file with ReactDOM.render()

*why separate them(react & reactDom): to make react is used in both web and mobile, while reactDom is used only in web

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                            Create React App         
                                                                                  -----------------------------------  
*create react app(CRA) is a tool to create single-page React applications that is officially supported by the React team
   -advantage:
      -simplifies our development process, install all tools necessary to build react app(include react, react-dom,...)
      -it adds a couple of transformation steps(transformation of "JSX code" to "HTML code", CSS Modules,...)
      -also help optimize React code before push it to a production server

*syntax in command line: npx create-react-app folder-name

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                            Hooks in React        
                                                                                  ----------------------------------- 
*introducing Hooks: Hooks are a new addition in React 16.8, react-hooks let you use state and other React features without writing a class
*Hooks rules: 
   -hooks only works inside react components, custom hoos
   -only call react hooks at the top level
      -don't call them in nested functions
      -don't call them in any block statements

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                              React State, useState & Working with Events         
                                                                              -------------------------------------------
*introducting State:
   -state contains data or information about the component, when "the state object(state)" changes, the component of that state re-renders

   -when to use state: if you have data, which might change, and where changes to that data should be reflected on the user interface then you need state

   -how to store and change state: we use Class or "useState react-hook" in react,...

*store and change state using "useState react-hook":
   -how to use useState react-hook:
      -import the useState Hook from React, and call useState inside of component function but outside the return JSX
      -useState take a value(maybe object) to call, that is then becomes the state of the component, example: useState(value)
      -return value of useState is an array with pair of values 
         -first value of the array: the value itself(state of component)
         -second value of the array: "a update function" which can later call with a new value to change the value(state)

   -important about useState: 
      -calling "state updating function" doesn't change the value right away, but instead "schedules" state update 
      -whenever update state that depend on the previous state, should pass in a function to "the update function", and the function you pass in will receive the previous state snapshot
         -theoretically, if you schedule a lot of state updates at the same time, you could be depending on an outdated or incorrect state snapshot

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
                                                                                            Term in Component      
                                                                              -------------------------------------------
*lifting state up: moving data from a child component to some parent component

*pass state data via props: moving data from parent component to some a child component

*two way binding(input/components): 
   -definition:
      -two-way binding means that any data-related changes affecting the model are immediately propagated to the matching view(s),
       and any changes made in the view(s) are immediately reflected in the underlying model
      -whenever use two way binding you are controlling or vice versa

   -controlled input/component: data is handled by other component/React

   -uncontrolled input/component: data is handled by component/DOM itself

*container/statefull component: a stateful component is a component that holds and magnage state

*presentational/stateless component: stateless components, by contrast, have no state(just receive state from props), it's just there to output some data

*mounted:

*unmounted:

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
                                                                                              CSS Modules    
                                                                              -------------------------------------------
*CSS Module: is a CSS file in which all class names and animation names are scoped locally by default

*how to use: 
   -first, change file extension ".css" to ".module.css" and behind the scene, create react app are already configured to support CSS Modules(.module.css)
   -second, import an object(naming "styles") from "css module file", and in that object, you'll have every "class you defined" as "a property of that object"

*what css module does: what the build process does under the hood is it takes those CSS classes and a CSS file and basically changes those class names to be unique
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
                                                                                          Debugging React Apps    
                                                                              -------------------------------------------
*Debugging with browser devtools: 

*Debugging with React Devtools:

*notice: React development process, gives the browser a bridge, between "the code that runs" in the browser and the code we wrote(so that we are able to debug)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                                    React Fragments, Portals & Refs   
                                                                                  -----------------------------------  
*React.Fragment: 
   -definition: Fragments allow us to write cleaner code, to end up with less unnecessary HTML elements on the final page
   -Fragments in practice: import {Fragment} from "react"

*React Portals:
   -definition: Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component
   -Portals in practice:  <JSX code> {ReactDom.createPortal(<JSX code/>, document.getElementById(""))} </JSX code>

*React Refs: 
   -definition: allow to get access to other DOM elements and work with them
   -how refs works:
      -first, React reaches "all the JSX code " and renders "all the code", then it will actually set "the values stored in ref attribute of element" to "the real native DOM node(element)"
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                              Handlng Side Effects by Using the useEffect
                                                                                  -----------------------------------  
*Side Effect:
   -react jobs: render UI & react to "user input"
   -when we need to reach outside of our React components to do something that's Side Effect(sending a Http request, storing something in browser storage,...)

*Handlng Side Effects: the useEffect hook
   -definition: useEffect Hook allows you to perform side effects in your components
   -how the useEffect works:
      -the useEffect()Hook is called with two arguments with two parameters
      -the first argument is a function that should be executed "after every component evaluation" if "the specified dependencies" changed
      -and "the specified dependencies" are the second argument that you pass in, that's an array full of dependencies, and whenever such a dependency changes that first function will re-run

   -cleanup function: 
      -definition: the cleanup function prevents memory leaks and removes some unnecessary and unwanted behaviors
      -when cleanup function runs:
         -before useEffect function runs(except for the very first time when it runs), the cleanup function will run
         -in addition, the cleanup function will run whenever "the component that your useEffect in", unmounts from the DOM

*unofficial rule: always add everything you refer to inside of useEffect() as a dependency, unless there is a good reason to do that

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                                      Managing State: Using Reducers 
                                                                                  -----------------------------------  
*useReducers: 
   -useReducers: advanced of useState when you need "more powerful state management"(when have complex state, or multiple states, multiple ways of changing it,...)

   -example: const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn)

*how to use the useReducers:
   -useReducer just like useState, always returns an array with exactly two values
   -the two values you are getting are the latest state snapshot(used in the component re-render), but you also get a function that allows you to update that state snapshot
      -the state updating function: will dispatch an action, and that action will be consumed by "the first argument(reducer function)" you pass to useReducer
         -arguments of the state updating function can be anything(string, number,...) but often will be an object which has fields that hold identifier and payload
         -often the identify field is named "type", example : dispatchEmail({type: "USER_INPUT"})
         -and "payload" holds value, example : dispatchEmail({type: "USER_INPUT", val: event.target.value})
   -the reducerFn which gets the latest state snapshot automatically(because the function will be called by React) and it gets the action(object) that was dispatched,
      -React will call this reducer function whenever a new action is dispatched
      -example:     const emailReducer = (state, action) => {
                      if(action.type === "USER_INPUT") {
                        return {value: action.val, isValid: action.val.includes("@")}
                      }
                      return {value: "", isValid: false}
                    }
   -now the reducer function then also should do one important thing. It should return a new updated state(it's a bit like the function of the useState hook, but an extended version of that, you could say)
   -in addition, you can also set some initial state and also an initial function(that should run to set the initial state in case your initial state is a bit more complex, example: HTTP requests,...)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                                     Managing State: the Context API  
                                                                                  -----------------------------------  
*the Context API:
   -React Context is a method to pass props from parent to child component(s), by storing the props in a store(similar in Redux)
    and using these props from the store by child component(s) without actually passing them manually at each level of the component tree

*using React Context API:
   -first, create store(an folder) to stores "contexts"(example: auth-context.js)
      -you can have multiple "contexts", for multiple "global states" in your app and of course, you can also use just one "context" for a bigger State
   -inside context file:
      -in there we import React from React, and calls createContext, example: React.createContext(),
      -Now createContext takes "a default context", and "default context" is just your "state"
      -a default context can be anything, but often though, it's an object, an object that contains "states" as it’s properties
      -what we get back from createContext, it will be an object that contains component
      -Now we don't need this object here though, instead we'll need it in the other components. So we’ll export it as a default to make it available in our files.

   -now we can import this specific Context object and to then use Context in your app, you need to do two things:
      -You need to provide it, example: <contextObject.provider><App/></contextObject.provider>
         -Providing means that all the components(include children), you wrap in contextObject.provider should be able to consume that context
         -how to changing context value using Provider: 
            -provider have a value property, and in that you can pass an object, that object is your new context object value
            -you can make it change dynamically by using state of the component it is in
            -now you would be able to change that object, And whenever it changes, the new value will be passed down to all consuming components to use
          
      -And besides providing, you then need to consume it. You need to hook into it, you need to listen to it,
         -we can listen in two ways:
             -We can listen by using Consumer:
                -we wrap the entire component with <objectContext.consumer/>(only the component that we want to using directly the context)
                -in that consumer we must create a function in the curly bracket, inside that function we must return the component(the component that using context)
                -remember, the context value will actually only be used if we would consume but without having a provider or a provider that changing the context
                   -in reality, you will use context to have a value which can change, so we dont want to remove the Provider
                   -So therefore, to make sure that this does not crash, we go back to the provider, and make provider changing the context, if it's not
             -or by using a React Hook(recommend): useContext hook allows to use the Context, allows to tap into a Context and listen to it
                -import useContext hook from react, call it in your react component and you pass the contextObject(import from store), the contextObject that you want to use to it
                -what you get back, is the context object value, and it's all you need to access to context object value using useContext hook

*recommend: so for better IDE auto-completion, it is a good idea to add all state in your default context object(just with a dummy function of course)

*context limitations:
   -react context is NOT optimized for high frequence changes(redux can fix it)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                                             Forward Refs  
                                                                                  -----------------------------------  
*forward refs: 
   -function components cannot be given refs, so we forward it(refs) down to the real elements(JSX) that can be given refs, by using forward refs technique, in order to be given ref by react components

*we can make it work by useImperativeHandle : this is something you rarely wanna use, you wanna find an alternative
   -first, in the component(that holds the real elements), we need to import another hook, and that's the useImperativeHandle hook
   -then we need to call it(useImperativeHandle) and pass two things to it:     
      -the first arguments, is the second param of the react component(naming ref)
         -the second param of the react component only works if the outside component adds the "ref property" to the component(that holds the real elements)
          and binds this to "value of useRef create in parent component", essentially, "second params" will establish the connection 
         -now we're still not there yet, this alone would not work, in order to enable this second argument here, we need to export our component function in a special way
         -we need to wrap it with something special and that's coming from React, and it's called forwardRef, example: React.forwardRef(component)
         -forwardRef returns a react component, a react component that is capable of being bound to a ref
      -the second arguments is a function, that return an object, contains all the data(or functions), that can be used by the outside component(used on "value of useRef create in parent component")
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                                 Behind The Scenes of React & ReactDom
                                                                                  -----------------------------------    
*what is the job of React:
   -React only cares about components. It cares about props, which is basically data you pass to components to make components configurable and to enable parent-child component communication
   -React cares about state which is internal data inside of a component
   -And React cares about context which is component-wide data(Now of course, React has a couple of other features built in as well)
   -And React hands all that information regarding what changed and what should be visible on the screen, no matter what screen that is, for example, it hands it off to ReactDOM

*what is the job of ReactDOm: ReactDOM is responsible for working with the real DOM, which is part of the browser, and therefore ReactDOM is responsible for bringing something onto the screen

*how React hands off "what should be visible" to ReactDom:
   -React uses a concept called the virtual DOM. It determines how the component tree currently looks like and what it should look like(after a state update,...)
   -and after "Virtual DOM Diffing", react then hand "the differences" off to ReactDOM(which now knows about the differences) and which then knows how it should manipulate the real DOM to match that virtual DOM

*Virtual DOM Diffing by React: Snapshots & Diffing
   -snapshots: previous and current evaluation result of virtual Dom
   -diffing: react determine the difference between both snapshots, and it would report this change to ReactDOM, so that ReactDOM can update the real DOM

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                                             React.memo()
                                                                                  -----------------------------------  
*react.memo: that "a component it wrapped" should only re-execute under certain circumstances(that the props changed)

*notice: you're trading the performance cost of re-evaluating the component for the performance cost of "comparing props(memo)"

*comparing props by memo: a regular comparison operator(be careful with reference prop values)

*example: export default React.memo(DemoOutput)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                           Preventing Function Re-Creation with useCallback()
                                                                                  -----------------------------------  
*useCallback hook: 
   -make React Memo work for prop values that are objects as well
   -useCallback is a hook that allows us to basically store(save) a function across "component executions"

*useage: 
   -we just wrapped the function we wanna save as the first argument with it, 
   -the second argument is an array of dependencies, if dependencies change, the function is re-evaluated(can take new data)
   -and useCallback then returns that "stored function"

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                                          React useMemo Hook
                                                                                  -----------------------------------  
*useMemo: basically allows you to memoize, any kind of data which you want to store, just like useCallback does it for functions

*useage: 
   -the first argument is a function, that is not a function that will be memorized. Instead, that function should return what you want to store(array, object, string,...)
   -the second argument is an array of dependencies, the first argument only rebuild, if dependencies changed 

*notice:
   -react.memo memorizing data
   -useCallback memorizing function
   -you will use useMemo far less often than you use useCallback, because memorizing functions is much more useful than memorizing data
   -You essentially wanna memorize data if it would be performance-intensive

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                                 Scheduling, Batching & Manages State
                                                                                  -----------------------------------  
*how React manages state:
   -for the first time a component is rendered, useState when executed, creates a new state variable which is handed off to React(managed by React)
   -React then memorizes to which component that(state) belongs. And it uses the default value to initialize the state
   -after "state updating", the component is re-evaluated, useState is being called, and no new state is being created(because React recognizes that it already has a state for this component)
   -Instead, it simply updates the state as needed
   -now React only do state management and updating. It never reinitialize the state, unless the component was totally removed from the DOM in the meantime

*Schedules: 
   -calling "state updating functions" in general "schedules" "a state update" that then become "a scheduled state change":
      -schedules state change: now React plans on processing it, but React doesn't process that immediately though(most of the time, "schedules state change" will be processed very fast instantly)
   -React reserves the right of actually postponing that state change
      -For example, because a lot of other performance intensive tasks are going on at the same moment
      -potentially tasks(input field where the user is able to type something), that React considers to have a higher priority than changing some text on the screen
      -now, what React does is, it guarantees you that the order of state changes for one in the same type of state is guaranteed
   -and once that state change was processed, React will re-evaluate the component, it will re-run the component function

*Batching: 
   -if you call two or more "state updates function" in the same synchronous code, after each other(for example, in one function)
   -React will batch those "state updates function" together into "one state update", which then changes two or more different states, in order, but in one "schedules state change"
   -now after all of that, the component only be re-executed(evaluate) one time

*notice: because of the scheduling, where of course you might have multiple "scheduled state changes" at the same time and referring to the same value, so that be aware of that

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                                             Custom Hooks
                                                                                  -----------------------------------  
*Custom Hooks
   -when you have component logic that needs to be used by multiple components, we can extract that logic to a custom Hook

*how to create a custom hook: 
   -we store custom hook in a standalone file. And the function which you do create "has to" start with a "use" in its name, example : const useCounter = () => {}
   -It will be a normal function in the end but "the use at their beginning" signals to react that it will be a custom hook(and you will use that function by respecting the rules of hooks)

*how to use custom hook: import in the component that you want to use, and use the return value, that you return from your custom hook

*notice: if you call a custom hook in one of your components and that custom hook registers a state or an effect, then this state and effect will be tied to the component in which you use your custom hook

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                          Diving into Redux(An Alternative To The Context API)
                                                                                  -----------------------------------  
*what is Redux:
   -Redux is a state management system for a cross-component(or app-wide state)
   -So both React Context and Redux are there to help us manage such cross-component or app-wide States

*local state: state that belongs to a single component
   -typically we manage such local state inside of a component with useState or if it's more complex maybe with useReducer

*cross-component state: state that affects multiple components
   -we can also implement that with useState or useReducer, we then just need to pass props around so we need to build those prop chains

*app-wide state: state that affects the entire app(most/all components)
   -we can also manage this with the useState, useReducer and then by passing state values and updating functions around full props

*why we need Redux:
   -you have large amounts of application state that are needed in many places in the app
   -the app state is updated frequently
   -the logic to update that state may be complex
   -the app has a medium or large-sized codebase, and might be worked on by many people

*central data store:
   -a store holds the whole state tree of your entire application(only have one store in entire app), and notify whenever the data changes to who subscripted

*component subscription:
   -components set up subscriptions to "central data store", so then we can use it from inside our components, and get notifed

*reducer function:
   -the function is responsible, for listening to actions and mutating existing states in the store, based on the desired operation of actions

*action:
   -actions(object) contain the kind of operation, the "reducer" should perform

*dispatch:
   -a function that lets components dispatch actions to reducer

*core concepts(Redux):   

                     -----------------▶  Reducer Function
                     🔺 forwarded to           
                     ||                         ||
                     ||                         ||
                     ||                         ||    mutates(Changes) "store data"
                                                ||   
                   Action                       || 
             (kind of operation)                ||
                     🔺                         🔻
                     ||
                     ||                "Central Data(State) Store" 
                     ||          
                     ||                         ||
                     ||                         ||   subscription
                     ||                         ||
                     ||                         🔻
                     ||    dispatch
                     ◀------------------   Components
                                       

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                               Redux Basic in Practice(all steps in one file) & have code*  
                                                                                  -----------------------------------  
*First: create "store" in a separate file: 
   -that store(const store) should manage some data, and the data which it manages is in the end, determined by the "reducer function"
   -const store = redux.createStore()
   
*Second: create "reducer function"
   -reducer function should be a pure function(same values should produce the same output, and no side effects)
      -the reducer function receive two parameters, the state(old, existing) and the action(that was dispatched)
         -when the "store" is initialized, Redux will execute the "reducer" for the first time, in that time, state is undefined
         -so we need to set a default value for the state(for the first time)
      -the reducer function return a "new state object(it can be anything)"
   -example:
                 const reducerFunction = (state = { counter: 0 }, action) => {     -----> // set a default state value for the first time
                    return { counter: state.counter + 1 }                          
                 };    

                 const store = redux.createStore(reducerFunction) 
 
*Third: create someone(function) who subscribes to the store  
   -store.getState(): it will give us the latest state snapshot
   -store.subscribe(): the subscribe method wants a subscriber function which Redux will then execute for us whenever "the data in the store changed(human dispatch an action)"
   -example:
                 const subscriberFunction = () => {
                    const latestState = store.getState();   -----> // get new state
                    console.log(latestState)     -----> subscriberFunction has yet executed
                 };

                 store.subscribe(subscriberFunction);      -----> // subscribing

*finally: create dispatch function
   -store.dispatch(): dispatch is a method which dispatches a JavaScript object
      -it's a JavaScript object with a " type property", which acts as an identifier
      -typically you use a string here and then this should be a unique string
      -so that every action, every distinct action, which you dispatch leads to different things being done in the reducer
   -example:
                 const reducerFunction = (state = { counter: 0 }, action) => {     -----> //"reducerFunction" will be called, if there is an action coming 
                    if (action.type === "increment") {                             -----> //checking type to identify the operation the "reducer" should perform
                       return { counter: state.counter + 1 }                                 
                    };
 
                    return state
                 };     
            
                 store.dispatch({type: "increment"})     -----> //dispatch an action(object of type to identify)

*notice:
   -Redux will dispatch a default initialization action with a value of undefined, when the "store" is initialized(the first time store is create)
   -store.subscribe() only call subscriber function, only when the data in the store changed(human dispatch an action), not the default initialization action by redux

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                         Creating Redux for React in Practice with React-Redux 
                                                                                  -----------------------------------          
*Create Store in React app:
   -components can access "default state" for the first time, no need to dispatch to access

   -src/store/index.js  
   -example:
                 import { createStore } from "redux"

                 const reducerFunction = (state = { counter: 0 }, action) => {     ----->//components can access "default state" for the first time, no need to dispatch to access
                    if (action.type === "increment") {                             
                       return { counter: state.counter + 1 }                                 
                    };

                    if (action.type === "decrement") {                             
                       return { counter: state.counter - 1 }                                 
                    };

                    return state
                 };     

                 const store = createStore(reducerFunction)     ----->//create store

                 export default store    

*providing the "store":
   -The <Provider> component makes the "Redux store" available to any nested components that need to access the Redux store

   -src/index.js
   -example:
                 import { Provider } from "react-redux"
                 import store from "./store/index.js"
               
                 const root = ReactDOM.createRoot(document.getElementById("root"));
                 root.render(<Provider store={store}><App/></Provider>)     -----> //providing

*subscription & using "Redux store"(can be used inside any component):
   -useSelector take a function, a function basically determines which piece of data we wanna extract from our store
      -a function of which will receive the state(first param) managed by Redux
      -and then we return the part of the state which you wanna extract, return property of object(state)
   -useSelector: it subscribe to the Redux store, and run your selector whenever an action is dispatched
   -if you ever would unmount this component, useSelector would also automatically clear the subscription for you
   -example:
                 import { useSelector } from "react-redux"

                 const Counter = () => {
                    const counter = useSelector(state => state.counter)     ----->//subscripting & using
                       return <Display/>                
                 }

*dispatching actions(can be used inside any component):
   -useDispatch() with no argument, return a function
   -a function we can call, which will dispatch an action to our Reducer
   -example:
                 import { useDispatch } from "react-redux"

                 const Counter = () => {
                    const counter = useSelector(state => state.counter)
                    const dispatch = useDispatch()     ----->//dispatching

                    const incrementHandler = () => {
                       dispatch({type : "increment"})
                    };

                    return <Display onClick={incrementHandler}/>                
                 }                 

*attaching payloads to action:
   -just adding extra payload to property of action object, and you can access it from the reducer
   -example:

                 const reducerFunction = (state = { counter: 0 }, action) => {     ----->//inside reducer function
                    if (action.type === "increase") {                             
                       return { counter: state.counter + action.amount }                                 
                    };

                    return state
                 };   

                 -------------------------------------------------------------------------------------------

                 const increaseHandler = () => {                 -----> inside component
                    dispatch({type : "increase", amount: 5})
                 };

*notice:
   -never mutate your old state, always return a "brand new snapshot" in your reducer, if not, it will lead to bugs,...

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                                       Introducing Redux Toolkit
                                                                                   -----------------------------------               
*Redux Toolkit: 
   -makes it easier to write good Redux applications and speeds up development   
   -Redux Toolkit package included redux library

*Create Store & Reducer in React app:
   -createSlice: 
      -a function take an object that accepts an initial state(components can access for the first time), an object of reducer functions, and a "slice name",
      -and automatically generates action creators and action types that correspond to the reducers and state
   -configureStore: like createStore creates a store but it makes merging multiple reducers into one reducer easier thereafter
      -the key names of "object reducer" are the property name of object state, that the useSelecter give us as the first param of function argument

   -src/store/index.js
   -example:
                 import { createStore } from "redux"
                 import { createSlice, configureStore } from "@reduxjs/toolkit"
             
                 const initialState = { counter: 0, showCounter: true }

                 const counterSlice = createSlice({
                    name: "counter",   ----->//identifier of the piece of state 
                    initialState,     ----->// components can access for the first time
                    reducers: {
                       increment(state, action) {     ----->//method that automatically be called depending on which action was triggered
                          state.counter++             ----->//here we are allowed to mutate the state, reduxjs/toolkit will clone and overwrite
                       },     

                       decrement() {},
                       increase() {},
                       toggleCounter() {}
                    }
                 })

                 const store = createStore(counterSlice.reducer)     ----->//if only have one reducer   
                 
                 -------------------------------------------------------------------------------------------------------                

                 const store = configureStore({                    ----->//the way to create a store for multiple reducers
                    reducer: { counter: counterSlice.reducer },    ----->//useSelector(state => state.counter)
                 })    

*providing the "store": like creating Redux for React

*subscription & using "Redux store": like creating Redux for React

*dispatching actions & attaching payload:
   -"action creator": 
      -a function that returns an "action object(that dispatch function need)" when called
         -any value you pass in that function as the first argument, will be stored in an extra field named payload
      -the "action objects" created by the "action creators" already have a type property with a unique identifier               
      -"action creators" are held by "createSlice().actions(object)", with the property names matching the method names we have in our reducers of createSlice function

   -src/store/index.js
   -example:     
                 export const counterActions = counterSlice.actions     -----> this holds "action creators"
        
                 ---------------------------------------------------------------------------------------------------------

                 import { useDispatch } from "react-redux"
                 import { counterActions } from "../store/index.js"

                 const Counter = () => {
                    const counter = useSelector(state => state.counter)
                    const dispatch = useDispatch()     ----->//dispatching

                    const increaseHandler = () => {
                       dispatch(counterActions.increase(10))     ----->// { type: SOME_UNIQUE_IDENTIFUER, payload: 10 }
                    };

                    return <Display onClick={incrementHandler}/>                
                 }   

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                                Advanced Redux: Side Effect, Async Tasks
                                                                                   -----------------------------------    
*where should side-effects and async tasks be executed:
   -inside the components
      -using useEffect to deal with side-effects, async tasks, and dispatch to the store to store the value
   -inside the action creators

*synchronous, side-effect free code(data transformations):
   -should prefer Reducers

*what is a "Thunk":
   -a function that delays an action until later
   -an action creator function that does NOT return the action itself, but another function(that deal with side-effects, async tasks) which eventually returns the action or maybe NOT

*create our own "action creator(Thunk)":
   -if you're dispatching a function(that deal with side-effects, async tasks), instead of action object, redux will automatically execute that function for you
   -that function will receive the dispatch function as the first param, so that you can dispatch again 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------      
                                                                              Building a Multi-Page SPA with React Router
                                                                                   -----------------------------------   


















---------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                THE END
*notice:
*have code: 
   -code/redux-basis-all-in-one-file.txt



































